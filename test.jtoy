//map :: (array: [] $T, f: (T) -> $R) -> [] R {
//}

//array_unordered_remove :: inline (array: *[..] $T, item: T) -> s64 {
//    return 0;
//}

REPEATING :: 0x1;

//file := cast (*Compiler_Message_File) message;
#import "test2.jtoy";

Namespace :: struct
{
    cVec :: 2;  
};

Vector2 :: struct
{
    x : float = 1;
    y : float = 2;
};

Sprite :: struct
{
    aVec : [Namespace.cVec] Vector2;
    g := 4.3;
    zip : s64 = 98052;
};

vec : Vector2;
gPi := 3.14159;

printf :: (format : * char, ..) -> int #foreign;

Factorial :: (n : s64) -> s64 { if n == 0 return 1; return n * Factorial(n-1); }

main :: ()
{
    i := 0; // BB (adrianb) What's the right type for this? s64?
    c := CLoop();
    a :: 2;
    b := 900;

    aVec : [2] Vector2;
    aSprite : [2] Sprite;

    aSprite[1].zip = 98004;
    aSprite[0].aVec[1].y = 30.4;

    aG : [3] float;

    aG[2] = 5.5;

    aVec[1].x = 9003;
    aVec[0].y = 46;

    pB := *b;
    defer { printf("Leaving and pB = %d\n", << pB); }
    << pB = 400;

    vec2 : Vector2;
    vec2.x = 50;
    vec2.y = 313;

    printf("vec = (%f, %f)\n", vec.x, vec.y);
    printf("vec2 = (%f, %f)\n", vec2.x, vec2.y);
    printf("aVec = [(%f, %f), (%f, %f)]\n", aVec[0].x, aVec[0].y, aVec[1].x, aVec[1].y);
    printf("aSprite = [([(%f, %f), (%f, %f)], %f, %lld), ([(%f, %f), (%f, %f)], %f, %lld)]\n", 
           aSprite[0].aVec[0].x, aSprite[0].aVec[0].y, aSprite[0].aVec[1].x, aSprite[0].aVec[1].y, aSprite[0].g, aSprite[0].zip,
           aSprite[1].aVec[0].x, aSprite[1].aVec[0].y, aSprite[1].aVec[1].x, aSprite[1].aVec[1].y, aSprite[1].g, aSprite[1].zip);
    printf("aG = [%f, %f, %f]\n", aG[0], aG[1], aG[2]);
    printf("pi = %f\n", gPi);
    gPi = 3;
    printf("bad pi = %f\n", gPi);
    printf("a = %d %d %d\n", a, a, a);

    // BB (adrianb) Should error on i < c because types don't match...

    while i < c
    {
        printf("\"i\" = %d\n", a + << pB + -i);
        ++i;
    }

    fEarly := true; //false;
    if (fEarly)
    {
        return;
    }

    printf("Made it past early\n");

    b = 302;

    printf("factorial(%ld) == %ld\n", CLoop(), Factorial(CLoop()));
}