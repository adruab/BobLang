//map :: (array: [] $T, f: (T) -> $R) -> [] R {
//}

//array_unordered_remove :: inline (array: *[..] $T, item: T) -> s64 {
//    return 0;
//}

REPEATING :: 0x1;

//file := cast (*Compiler_Message_File) message;
#import "test2.jtoy";

Namespace :: struct
{
    cVec :: 2;  
};

Vector2 :: struct
{
    dim :: 2;
    x : float = 1;
    y : float = 2;
};

Sprite :: struct
{
    aVec : [Namespace.cVec] Vector2;
    using pos : Vector2;
    g := 4.3;
    zip : s64 = 98052;
};

vec : Vector2;
gPi := 3.14159;

printf :: (format : * char, ..) -> int #foreign;

Factorial :: (n : s64) -> s64 { if n == 0 return 1; return n * Factorial(n-1); }

FInString :: (ch : char, str : string) -> bool
{
    iCh : u32 = 0;
    while (iCh < str.cCh)
    {
        if (str.pCh[iCh] == ch)
            return true;
        ++iCh;
    }
    return false;
}

StrTokenize :: (str: * string, strDelim: string) -> string
{
    iCh : u32 = 0;
    while (iCh < str.cCh)
    {
        if (!FInString(str.pCh[iCh], strDelim))
            break;
        ++iCh;
    }
    
    iChMic := iCh;

    while (iCh < str.cCh)
    {
        if (FInString(str.pCh[iCh], strDelim))
            break;
        ++iCh;
    }

    // BB (adrianb) Provide string/array slicing syntax?

    strToken : string;
    strToken.pCh = str.pCh + iChMic;
    strToken.cCh = iCh - iChMic;

    str.pCh += iCh;
    str.cCh -= iCh;

    return strToken;
}

PrintN :: (n : s8)
{
    printf("s8 %d\n", n);
}

PrintN :: (n : s64)
{
    printf("s64 %ld\n", n);
}

PrintN :: (n1 : s64, n2 : s64)
{
    printf("s64x2 %ld %ld\n", n1, n2);
}

main :: ()
{
    n : s32 = 5;
    i := 0; // BB (adrianb) What's the right type for this? s64?
    c := CLoop();
    a :: 2;
    b := 900;

    aVecF : [2] Vector2;
    aSprite : [2] Sprite;

    aVec : [] Vector2 = aVecF;

    aSprite[1].x = 5.5;
    aSprite[1].y = 10.5;
    aSprite[1].zip = 98004;
    aSprite[0].aVec[1].y = 30.4;

    aG : [3] float;

    aG[2] = 5.5;

    aVec[1].x = 9003;
    aVec[0].y = 46;

    pB := *b;
    defer { printf("Leaving and pB = %d\n", << pB); }
    << pB = 400;

    vec2 : Vector2;
    vec2p := *vec2;
    vec2p.x = 50;
    vec2p.y = 313;

    printf("vec = (%f, %f) dim %d\n", vec.x, vec.y, vec.dim);
    printf("vec2 = (%f, %f)\n", vec2.x, vec2.y);
    printf("aVec[%d] = [", aVec.c);
    while i < aVec.c
    {
        printf(" (%f, %f),", aVec[i].x, aVec[i].y);
        ++i;
    }
    printf("]\n");
    printf("aVecF[%p, %d] = [(%f, %f), (%f, %f)]\n", aVecF.a, aVecF.c, aVecF[0].x, aVec[0].y, aVec[1].x, aVec[1].y);
    printf("aVec = [(%f, %f), (%f, %f)]\n", aVec[0].x, aVec[0].y, aVec[1].x, aVec[1].y);
    printf("aSprite = [([(%f, %f), (%f, %f)], (%f, %f), %f, %lld), ([(%f, %f), (%f, %f)], (%f, %f), %f, %lld)]\n", 
           aSprite[0].aVec[0].x, aSprite[0].aVec[0].y, aSprite[0].aVec[1].x, aSprite[0].aVec[1].y, aSprite[0].x, 
                aSprite[0].y, aSprite[0].g, aSprite[0].zip,
           aSprite[1].aVec[0].x, aSprite[1].aVec[0].y, aSprite[1].aVec[1].x, aSprite[1].aVec[1].y, aSprite[1].x, 
                aSprite[1].y, aSprite[1].g, aSprite[1].zip);
    printf("aG = [%f, %f, %f]\n", aG[0], aG[1], aG[2]);
    printf("pi = %f\n", gPi);
    gPi = 3;
    printf("bad pi = %f\n", gPi);
    printf("a = %d %d %d\n", a, a, a);

    using pos : Vector2;
    x = 50.5;
    y = 323.23;

    printf("pos local is %f, %f\n", x, y);

    // BB (adrianb) Should error on i < c because types don't match...?

    i = 0;
    while i < c
    {
        printf("\"i\" = %d\n", a + << pB + -i);
        ++i;
    }

    printf("factorial(%ld) == %ld\n", CLoop(), Factorial(CLoop()));

    //printf("Run gives %d\n", s_nFactorialResult);
    //s_nFactorialArg :: 5;
    //s_nFactorialResult :: #run Factorial(s_nFactorialArg);

    //printf("Run gives %d\n", s_nFactorialResult);
    //s_nFactorialArg :: 5;
    //s_factWrap :: () -> s64 { return #run Factorial(s_nFactorialArg); }
    //s_nFactorialResult :: #run s_factWrap();

    p1 : *int = null;
    p2 := p1 + 1;
    p3 := p1 + 1;
    if ((p2 != null) && ((p1 != null) || (p3 == null)))
    {
        << p1 = 3;
    }

    str := "hello";
    printf("string has %d characters %.*s\n", str.cCh, str.cCh, str.pCh);

    strSet := "the quick  brown .  fox \t jumps.over\n the lazy dog";
    
    printf("Tokenize \"%.*s\"\n", strSet.cCh, strSet.pCh);
    while (true)
    { 
        strTok := StrTokenize(*strSet, " \t\r\n.");
        if strTok.cCh == 0
            break;
        printf(" \"%.*s\"", strTok.cCh, strTok.pCh);
    }
    printf("\n\n");

    n8 : s8 = 7;
    n16 : s16 = 1023;
    n64 : s64 = 275;

    PrintN(n8);
    PrintN(n16);
    PrintN(n64);
    PrintN(n8, n8);

    //PrintN(5); // Need to choose closest matchif (matchk > matchkBest)
    //PrintN(7653);

    fEarly := true; //false;
    if (fEarly)
    {
        return;
    }

    printf("Made it past early\n");

    b = 302;
}
